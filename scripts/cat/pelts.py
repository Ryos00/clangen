from random import choice, randint


class SingleColour():
    name = "SingleColour"
    sprites = {1: 'single'}
    white_patches = None

    def __init__(self, colour, length):
        self.colour = colour
        self.length = length
        self.white = self.colour == "white"

    def __repr__(self):
        return self.colour + self.length

class TwoColour(object):
    name = "TwoColour"
    sprites = {1: 'single', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, length):
        self.colour = colour
        self.length = length
        self.white = True

    def __repr__(self):
        return f"white and {self.colour}{self.length}"

class Tabby(object):
    name = "Tabby"
    sprites = {1: 'tabby', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} tabby"
        else:
            return self.colour + self.length + " tabby"

class Marbled(object):
    name = "Marbled"
    sprites = {1: 'marbled', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} marbled"
        else:
            return self.colour + self.length + " marbled"

class Rosette(object):
    name = "Rosette"
    sprites = {1: 'rosette', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} rosette"
        else:
            return self.colour + self.length + " rosette"

class Smoke(object):
    name = "Smoke"
    sprites = {1: 'smoke', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO',
        'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} smoke"
        else:
            return self.colour + self.length + " smoke"

class Ticked(object):
    name = "Ticked"
    sprites = {1: 'ticked', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} ticked"
        else:
            return self.colour + self.length + " ticked"

class Speckled(object):
    name = "Speckled"
    sprites = {1: 'speckled', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length
    def __repr__(self):
        if self.white:
            return f"white and {self.colour} speckled{self.length}"
        else:
            return f"{self.colour} speckled{self.length}"

class Bengal(object):
    name = "Bengal"
    sprites = {1: 'bengal', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'

    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length
    def __repr__(self):
        if self.white:
            return f"white and {self.colour} bengal{self.length}"
        else:
            return f"{self.colour} bengal{self.length}"

class Snowflake(object):
    name = "Snowflake"
    sprites = {1: 'snowflake', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} snowflake"
        else:
            return self.colour + self.length + " snowflake"

class Clouded(object):
    name = "Clouded"
    sprites = {1: 'clouded', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} clouded"
        else:
            return self.colour + self.length + " clouded"

class Merle(object):
    name = "Merle"
    sprites = {1: 'merle', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} merle"
        else:
            return self.colour + self.length + " merle"

class Abyssinian(object):
    name = "Abyssinian"
    sprites = {1: 'abyssinian', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} abyssinian"
        else:
            return self.colour + self.length + " abyssinian"
        
class Ragdoll(object):
    name = "Ragdoll"
    sprites = {1: 'ragdoll', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'VITILIGO', 'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} ragdoll"
        else:
            return self.colour + self.length + " ragdoll"
        
class Shaded(object):
    name = "Shaded"
    sprites = {1: 'shaded', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} shaded"
        else:
            return self.colour + self.length + " shaded"

class Doberman(object):
    name = "Doberman"
    sprites = {1: 'doberman', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} doberman"
        else:
            return self.colour + self.length + " doberman"

class Pinstripe(object):
    name = "Pinstripe"
    sprites = {1: 'pinstripe', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} pinstripe"
        else:
            return self.colour + self.length + " pinstripe"

class Ghost(object):
    name = "Ghost"
    sprites = {1: 'ghost', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} ghost"
        else:
            return self.colour + self.length + " ghost"

class Spotted(object):
    name = "Spotted"
    sprites = {1: 'spotted', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} spotted"
        else:
            return self.colour + self.length + " spotted"
        
class Cloudy(object):
    name = "Cloudy"
    sprites = {1: 'cloudy', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} cloudy"
        else:
            return self.colour + self.length + " cloudy"

class Classic(object):
    name = "Classic"
    sprites = {1: 'classic', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} classic"
        else:
            return self.colour + self.length + " classic"
        
class Mackerel(object):
    name = "Mackerel"
    sprites = {1: 'mackerel', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} mackerel"
        else:
            return self.colour + self.length + " mackerel"
        
class Sokoke(object):
    name = "Sokoke"
    sprites = {1: 'sokoke', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} sokoke"
        else:
            return self.colour + self.length + " sokoke"
        
class Gradient(object):
    name = "Gradient"
    sprites = {1: 'gradient', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} gradient"
        else:
            return self.colour + self.length + " gradient"
        
class Siamese(object):
    name = "Siamese"
    sprites = {1: 'siamese', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO',
        'VITILIGO2',
        'MOJO', 'STAINS', 'STAINS2', 'HALFHEART', 'FRECKLES2', 'WHITEEAR', 'CRESCENT',
        'HUSKY', 'COW', 'MASK', 'S', 'SWIFTPAW',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} siamese"
        else:
            return self.colour + self.length + " siamese"
        
class DarkTabby():
    name = "DarkTabby"
    sprites = {1: 'darktabby', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} darktabby"
        else:
            return self.colour + self.length + " darktabby"

class DilutedTabby():
    name = "DilutedTabby"
    sprites = {1: 'dilutedtabby', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} dilutedtabby"
        else:
            return self.colour + self.length + " dilutedtabby"
        
class DarkMarbled():
    name = "DarkMarbled"
    sprites = {1: 'darkmarbled', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} darkmarbled"
        else:
            return self.colour + self.length + " darkmarbled"


class DilutedMarbled():
    name = "DilutedMarbled"
    sprites = {1: 'dilutedmarbled', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} dilutedmarbled"
        else:
            return self.colour + self.length + " dilutedmarbled"
        
class DarkRosette():
    name = "DarkRosette"
    sprites = {1: 'darkrosette', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} darkrosette"
        else:
            return self.colour + self.length + " darkrosette"

class DilutedRosette():
    name = "DilutedRosette"
    sprites = {1: 'dilutedrosette', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'VITILIGO', 'VITILIGO2',
        'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} dilutedrosette"
        else:
            return self.colour + self.length + " dilutedrosette"
        
class TickedDilute():
    name = "TickedDilute"
    sprites = {1: 'tickeddilute', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2', 'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and {self.colour}{self.length} tickeddilute"
        else:
            return self.colour + self.length + " tickeddilute"
        
class DarkSpeckled():
    name = "DarkSpeckled"
    sprites = {1: 'darkspeckled', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2', 'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length
    def __repr__(self):
        if self.white:
            return f"white and {self.colour} darkspeckled{self.length}"
        else:
            return f"{self.colour} darkspeckled{self.length}"

class DilutedSpeckled():
    name = "DilutedSpeckled"
    sprites = {1: 'dilutedspeckled', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2', 'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length
    def __repr__(self):
        if self.white:
            return f"white and {self.colour} dilutedspeckled{self.length}"
        else:
            return f"{self.colour} dilutedspeckled{self.length}"
        
class DarkBengal():
    name = "DarkBengal"
    sprites = {1: 'darkbengal', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2', 'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'

    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length
    def __repr__(self):
        if self.white:
            return f"white and {self.colour} darkbengal{self.length}"
        else:
            return f"{self.colour} darkbengal{self.length}"

class DilutedBengal():
    name = "DilutedBengal"
    sprites = {1: 'dilutedbengal', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2', 'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'

    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length
    def __repr__(self):
        if self.white:
            return f"white and {self.colour} dilutedbengal{self.length}"
        else:
            return f"{self.colour} dilutedbengal{self.length}"

class Somali():
    name = "Somali"
    sprites = {1: 'somali', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2', 'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'

    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length
    def __repr__(self):
        if self.white:
            return f"white and {self.colour} somali{self.length}"
        else:
            return f"{self.colour} somali{self.length}"
        
class DarkClassic():
    name = "DarkClassic"
    sprites = {1: 'darkclassic', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2', 'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'

    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length
    def __repr__(self):
        if self.white:
            return f"white and {self.colour} darkclassic{self.length}"
        else:
            return f"{self.colour} darkclassic{self.length}"

class DilutedClassic():
    name = "DilutedClassic"
    sprites = {1: 'dilutedclassic', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2', 'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'

    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length
    def __repr__(self):
        if self.white:
            return f"white and {self.colour} dilutedclassic{self.length}"
        else:
            return f"{self.colour} dilutedclassic{self.length}"
        
class DarkMackerel():
    name = "DarkMackerel"
    sprites = {1: 'darkmackerel', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2', 'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'

    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length
    def __repr__(self):
        if self.white:
            return f"white and {self.colour} darkmackerel{self.length}"
        else:
            return f"{self.colour} darkmackerel{self.length}"

class MackerelDilute():
    name = "MackerelDilute"
    sprites = {1: 'mackereldilute', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2', 'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'

    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length
    def __repr__(self):
        if self.white:
            return f"white and {self.colour} mackereldilute{self.length}"
        else:
            return f"{self.colour} mackereldilute{self.length}"
        
class DarkSokoke():
    name = "DarkSokoke"
    sprites = {1: 'darksokoke', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2', 'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'

    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length
    def __repr__(self):
        if self.white:
            return f"white and {self.colour} darksokoke{self.length}"
        else:
            return f"{self.colour} darksokoke{self.length}"

class DilutedSokoke():
    name = "DilutedSokoke"
    sprites = {1: 'dilutedsokoke', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2', 'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 
        'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 
        'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 
        'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 
        'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 
        'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 
        'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 
        'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'

    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length
    def __repr__(self):
        if self.white:
            return f"white and {self.colour} dilutedsokoke{self.length}"
        else:
            return f"{self.colour} dilutedsokoke{self.length}"

class Freckled():
    name = "Freckled"
    sprites = {1: 'freckled', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2', 'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'

    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length
    def __repr__(self):
        if self.white:
            return f"white and {self.colour} freckled{self.length}"
        else:
            return f"{self.colour} freckled{self.length}"

class DilutedFreckled():
    name = "DilutedFreckled"
    sprites = {1: 'dilutedfreckled', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2', 'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 
        'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 
        'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 
        'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 
        'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 
        'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 
        'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 
        'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'

    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length
    def __repr__(self):
        if self.white:
            return f"white and {self.colour} dilutedfreckled{self.length}"
        else:
            return f"{self.colour} dilutedfreckled{self.length}"

class Tonkinese():
    name = "Tonkinese"
    sprites = {1: 'tonkinese', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2', 'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 
        'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 
        'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 
        'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 
        'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 
        'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 
        'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 
        'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'

    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length
    def __repr__(self):
        if self.white:
            return f"white and {self.colour} tonkinese{self.length}"
        else:
            return f"{self.colour} tonkinese{self.length}"

class DilutedTonkinese():
    name = "DilutedTonkinese"
    sprites = {1: 'dilutedtonkinese', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',
        'MITAINE', 'SQUEAKS', 'STAR',
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS', 
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO',
        'VITILIGO2', 'BLACKSTAR', 'JASMINE', 'BADGER', 'DILUTEDTUXEDO', 
        'DILUTEDCOLOURPOINT', 'SNOWBACK', 'REVERSEHEART', 'KARPATILIGO',
        'BLACKSTARCREAMY', 'HEARTCREAMY', 'REVERSEHEARTCREAMY', 'TAILCREAMY', 
        'DILUTEDTAIL', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDHEART', 'BROKENCREAMY', 
        'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'STARCREAMY', 'TOESTAILCREAMY', 
        'RAVENPAWCREAMY', 'SPINE', 'SCOURGECREAMY', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 
        'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 
        'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 
        'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'

    ]
    def __init__(self, colour, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = colour
        self.length = length
    def __repr__(self):
        if self.white:
            return f"white and {self.colour} dilutedtonkinese{self.length}"
        else:
            return f"{self.colour} dilutedtonkinese{self.length}"

class Tortie(object):
    name = "Tortie"
    sprites = {1: 'tortie', 2: 'white'}
    white_patches = [
        'LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 
        'BIB', 'VEE', 'PAWS', 'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO',
        'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
        'TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK',  'MITAINE', 'SQUEAKS', 'STAR',
        'COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'POINTMARK', 'VITILIGO', 'VITILIGO2',
        'FRECKLES2', 'HALFHEART', 'WHITEEAR', 'HUSKY', 'MASK', 'S',
        'BADGER', 'DILUTEDTUXEDO', 'DILUTEDCOLOURPOINT', 'REVERSEHEART', 'KARPATILIGO',
        'REVERSEHEARTCREAMY', 'DILUTEDTAIL','DILUTEDPIEBALD', 'DILUTEDGLASS', 
        'DILUTEDHEART', 'DILUTEDBROKEN', 'RAGDOLLCREAMY', 'LILTWOCREAMY',
        'STARCREAMY', 'TOESTAILCREAMY', 'RAVENPAWCREAMY', 'SCOURGECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 
        'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 'REVERSECURVEDFADE', 
        'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 'CURVEDCREAMY', 
        'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
        ]

    def __init__(self, white, length):
        self.white = white  # boolean; does cat have white on it or no
        self.colour = choice(["SILVER", "GREY", "DARKGREY", "BLACK",
                              "LIGHTBROWN", "BROWN", "DARKBROWN",
                              "BLACK2", "DARK", "CHOCOLATE", "FAWN",
                              "LILAC", "BLUE", "CINNAMON", "CARAMEL",
                              "DARKBG", "DARKGB", "DARKPURPLE",
                              "DARKGREY2", "GREY2", "BLACK3", "EBONY",
                              "DARKGB2", "BROWN2", "DARKBROWN2"])
        self.length = length

    def __repr__(self):
        if self.white:
            return f"white and tortoiseshell{self.length}"
        else:
            return f"tortoiseshell{self.length}"

class Calico(object):
    name = "Calico"
    sprites = {1: 'calico', 2: 'white'}
    white_patches = [
        'ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 
        'HALFFACE', 'PANTS2', 'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 
        'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD', 'CURVED', 'GLASS',
        'VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH',
        'MASKMANTLE', 'APRON', 'CAPSADDLE',
        'MOJO', 'STAINS', 'STAINS2', 'CRESCENT',
        'COW', 'SWIFTPAW', 'BLACKSTAR', 'JASMINE', 'SNOWBACK','BLACKSTARCREAMY', 
        'HEARTCREAMY', 'TAILCREAMY', 'CREAMBACK', 'PIEBALDCREAMY', 'GLASSCREAMY',
        'BROKENCREAMY', 'RAGDOLLCREAMY', 'LILTWOCREAMY', 'RINGTAILCREAMY',
        'HALFCREAMY', 'HALFFACECREAMY', 'SPINE', 'SPINECREAMY',
        'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSEANY2', 'REVERSEANY2CREAMY', 
        'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY',
        'ANYFADE', 'REVERSEANYFADE', 'ANY2FADE', 'REVERSEANY2FADE', 
        'REVERSECURVEDFADE', 'CURVEDFADE', 'REVERSEHALFFACEFADE', 'HALFFACEFADE',
        'REVERSEVAN', 'REVERSEVANCREAMY', 'VANFADE', 'LIGHTSONGCREAMY', 
        'CURVEDCREAMY', 'MOORISHFADE', 'MOORISHCREAMY', 'SKUNKCREAMY'
    ]
    def __init__(self, length):
        self.colour = choice(["SILVER", "GREY", "DARKGREY", "BLACK",
                              "LIGHTBROWN", "BROWN", "DARKBROWN",
                              "BLACK2", "DARK", "CHOCOLATE", "FAWN",
                              "LILAC", "BLUE", "CINNAMON", "CARAMEL",
                              "DARKBG", "DARKGB", "DARKPURPLE",
                              "DARKGREY2", "GREY2", "BLACK3", "EBONY",
                              "DARKGB2", "BROWN2", "DARKBROWN2"])
        self.length = length
        self.white = True

    def __repr__(self):
        return f"calico{self.length}"


# ATTRIBUTES, including non-pelt related
pelt_colours = [
    'WHITE', 'PALEGREY', 'SILVER', 'GREY', 'DARKGREY', 'BLACK', 'PALEGINGER',
    'GOLDEN', 'GINGER', 'DARKGINGER', 'LIGHTBROWN', 'BROWN', 'DARKBROWN',
    'WHITE2', 'BLUE', 'CARAMEL', 'LILAC', 'BLACK2', 'DARK', 'PALE', 'CREAM',
    'APRICOT', 'ORANGE', 'FAWN', 'CINNAMON', 'CHOCOLATE', 'CREAM2', 'LIGHTPINK',
    'PINK', 'DARKPINK', 'LIGHTBG', 'BG', 'DARKBG', 'CREAM3', 'PALEGINGER2',
    'GINGER2', 'DARKGINGER2', 'LIGHTGB', 'GB', 'DARKGB', 'LIGHTGREEN', 'GREEN',
    'DARKGREEN', 'LIGHTPURPLE', 'PURPLE', 'DARKPURPLE', 'SNOW', 'LIGHTGREY2',
    'GREY2', 'DARKGREY2', 'BLACK3', 'EBONY', 'PALEYELLOW', 'YELLOW', 'GOLD',
    'DARKCREAM', 'LIGHTGB2', 'GB2', 'DARKGB2', 'LIGHTBROWN2', 'BROWN2', 'DARKBROWN2',
    'WHITE3', 'PALEGREY2', 'LIGHTGREY3', 'GREY3', 'DARKGREY3', 'STONE', 'COAL', 
    'OBSIDIAN', 'BLACK4', 'PALECREAM', 'CREAM4', 'DARKCREAM2',
    'FAWN2', 'TAN', 'LIGHTBROWN3', 'BROWN3', 'CHOCOLATE', 'DARKBROWN3', 'EBONY1', 
    'PALEGINGER3', 'LIGHTGINGER3', 'GINGER3', 'FIRE',
    'DARKGINGER3', 'RUSSET', 'RED', 'AUBURN', 'PALELILAC', 'LIGHTLILAC', 'LILAC2', 
    'DARKLILAC', 'ROSE', 'LIGHTGOLD', 'GOLDEN2', 'DARKGOLD',
    'HONEY', 'LIGHTSILVER', 'SILVER2', 'DARKSILVER', 'PALEBLUE', 'LIGHTBLUE', 
    'BLUE1', 'RUSSIAN', 'DARKBLUE'
]
pelt_c_no_white = [
    'PALEGREY', 'SILVER', 'GREY', 'DARKGREY', 'BLACK', 'PALEGINGER', 'GOLDEN',
    'GINGER', 'DARKGINGER', 'LIGHTBROWN', 'BROWN', 'DARKBROWN',
    'BLUE', 'CARAMEL', 'LILAC', 'BLACK2', 'DARK', 'PALE', 'CREAM',
    'APRICOT', 'ORANGE', 'FAWN', 'CINNAMON', 'CHOCOLATE', 'CREAM2', 'LIGHTPINK',
    'PINK', 'DARKPINK', 'LIGHTBG', 'BG', 'DARKBG', 'CREAM3', 'PALEGINGER2',
    'GINGER2', 'DARKGINGER2', 'LIGHTGB', 'GB', 'DARKGB', 'LIGHTGREEN', 'GREEN',
    'DARKGREEN', 'LIGHTPURPLE', 'PURPLE', 'DARKPURPLE', 'SNOW', 'LIGHTGREY2',
    'GREY2', 'DARKGREY2', 'BLACK3', 'PALEYELLOW', 'YELLOW', 'GOLD', 'DARKCREAM', 
    'LIGHTGB2', 'GB2', 'DARKGB2', 'LIGHTBROWN2', 'BROWN2', 'DARKBROWN2',
    'PALEGREY2', 'LIGHTGREY3', 'GREY3', 'DARKGREY3', 'STONE', 'COAL', 'OBSIDIAN', 
    'BLACK4', 'PALECREAM', 'CREAM4', 'DARKCREAM2',
    'FAWN2', 'TAN', 'LIGHTBROWN3', 'BROWN3', 'CHOCOLATE2', 'DARKBROWN3', 'EBONY1', 
    'PALEGINGER3', 'LIGHTGINGER3', 'GINGER3', 'FIRE',
    'DARKGINGER3', 'RUSSET', 'RED', 'AUBURN', 'PALELILAC', 'LIGHTLILAC', 'LILAC2', 
    'DARKLILAC', 'ROSE', 'LIGHTGOLD', 'GOLDEN2', 'DARKGOLD',
    'HONEY', 'LIGHTSILVER', 'SILVER2', 'DARKSILVER', 'PALEBLUE', 'LIGHTBLUE', 
    'BLUE1', 'RUSSIAN', 'DARKBLUE'
]
pelt_c_no_bw = [
    'PALEGREY', 'SILVER', 'GREY', 'DARKGREY', 'PALEGINGER', 'GOLDEN', 'GINGER',
    'DARKGINGER', 'LIGHTBROWN', 'BROWN', 'DARKBROWN',
    'BLUE', 'CARAMEL', 'LILAC', 'DARK', 'PALE', 'CREAM',
    'APRICOT', 'ORANGE', 'FAWN', 'CINNAMON', 'CHOCOLATE', 'CREAM2', 'LIGHTPINK',
    'PINK', 'DARKPINK', 'LIGHTBG', 'BG', 'DARKBG', 'CREAM3', 'PALEGINGER2',
    'GINGER2', 'DARKGINGER2', 'LIGHTGB', 'GB', 'DARKGB', 'LIGHTGREEN', 'GREEN',
    'DARKGREEN', 'LIGHTPURPLE', 'PURPLE', 'DARKPURPLE', 'SNOW', 'LIGHTGREY2',
    'GREY2', 'DARKGREY2', 'PALEYELLOW', 'YELLOW', 'GOLD',
    'DARKCREAM', 'LIGHTGB2', 'GB2', 'DARKGB2', 'LIGHTBROWN2', 'BROWN2',
    'DARKBROWN2', 'PALEGREY2', 'LIGHTGREY3', 'GREY3', 'DARKGREY3', 'STONE', 
    'COAL', 'OBSIDIAN', 'PALECREAM', 'CREAM4', 'DARKCREAM2',
    'FAWN2', 'TAN', 'LIGHTBROWN3', 'BROWN3', 'CHOCOLATE2', 'DARKBROWN3', 'PALEGINGER3', 
    'LIGHTGINGER3', 'GINGER3', 'FIRE', 'DARKGINGER3', 'RUSSET', 'RED', 'AUBURN', 'PALELILAC', 
    'LIGHTLILAC', 'LILAC2', 'DARKLILAC', 'ROSE', 'LIGHTGOLD', 'GOLDEN2', 'DARKGOLD',
    'HONEY', 'LIGHTSILVER', 'SILVER2', 'DARKSILVER', 'PALEBLUE', 'LIGHTBLUE', 'BLUE1', 
    'RUSSIAN', 'DARKBLUE'
]
# Magi, these are for the dilute pelts bc they don't use all the regular colors
dilute_pelt_c = [
    'WHITE3', 'PALEGREY2', 'LIGHTGREY3', 'GREY3', 'DARKGREY3', 'STONE', 'COAL', 'OBSIDIAN', 
    'BLACK4', 'PALECREAM', 'CREAM4', 'DARKCREAM2', 'FAWN2', 'TAN', 'LIGHTBROWN3', 'BROWN3', 
    'CHOCOLATE2', 'DARKBROWN3', 'EBONY1', 'PALEGINGER3', 'LIGHTGINGER3', 'GINGER3', 'FIRE', 
    'DARKGINGER3', 'RUSSET', 'RED', 'AUBURN', 'PALELILAC', 'LIGHTLILAC', 'LILAC2', 'DARKLILAC', 
    'ROSE', 'LIGHTGOLD', 'GOLDEN2', 'DARKGOLD', 'HONEY', 'LIGHTSILVER', 'SILVER2', 'DARKSILVER', 
    'PALEBLUE', 'LIGHTBLUE', 'BLUE1', 'RUSSIAN', 'DARKBLUE'
]
tortiepatterns = ['tortiesolid', 'tortietabby', 'tortiedilutedtabby', 'tortiebengal', 
    'tortiedilutedbengal', 'tortiemarbled', 'tortiedilutedmarbled', 'tortieticked', 
    'tortietickeddilute', 'tortiesmoke', 'tortiesomali', 'tortierosette', 'tortiedilutedrosette', 
    'tortiespeckled', 'tortiedilutedspeckled', 'tortiefreckled', 'tortiedilutedfreckled',
    'tortieclassic', 'tortiedilutedclassic', 'tortiesokoke', 'tortiedilutedsokoke', 'tortiemackerel', 
    'tortiemackereldilute', 'tortietonkinese', 'tortiedilutedtonkinese', 'tortiesnowflake', 
    'tortieclouded', 'tortiemerle', 'tortieghost', 'tortiepinstripe']
patch_colours = ['PALEONE', 'PALETWO', 'PALETHREE', 'PALEFOUR', 'GOLDONE', 'GOLDTWO',
                'GOLDTHREE', 'GOLDFOUR', 'GINGERONE', 'GINGERTWO', 'GINGERTHREE', 'GINGERFOUR',
                'DARKONE', 'DARKTWO', 'DARKTHREE', 'DARKFOUR', 'PALEONE2', 'PALETWO2', 'PALETHREE2',
                'PALEFOUR2', 'CREAMONE', 'CREAMTWO', 'CREAMTHREE', 'CREAMFOUR', 'LIGHTGOLDONE', 
                'LIGHTGOLDTWO', 'LIGHTGOLDTHREE', 'LIGHTGOLDFOUR', 'HONEYONE', 'HONEYTWO', 
                'HONEYTHREE', 'HONEYFOUR', 'CREAMONE2', 'CREAMTWO2', 'CREAMTHREE2', 'CREAMFOUR2', 
                'FIREONE', 'FIRETWO', 'FIRETHREE', 'FIREFOUR', 'REDONE', 'REDTWO', 'REDTHREE', 
                'REDFOUR', 'COCOAONE', 'COCOATWO', 'COCOATHREE', 'COCOAFOUR']
tortiebases = ['spotted', 'single', 'tabby', 'bengal', 'marbled', 'ticked', 'smoke', 'rosette',
               'speckled', 'abyssinian', 'snowflake', 'clouded', 'merle', 'ghost', 'pinstripe',
               'doberman', 'cloudy', 'classic', 'mackerel', 'sokoke', 'gradient', 'siamese',
               'ragdoll', 'shaded', 'dilutedtabby', 'dilutedbengal', 'dilutedmarbled', 'tickeddilute',
               'somali', 'dilutedrosette', 'dilutedspeckled', 'dilutedclassic', 'dilutedsokoke', 'freckled', 'dilutedfreckled',
               'mackereldilute', 'tonkinese', 'dilutedtonkinese']
tortiecolours = ["SILVER", "GREY", "DARKGREY", "BLACK", "LIGHTBROWN", "BROWN", "DARKBROWN", "BLUE",
                 "LILAC", "BLACK2", "DARK", "FAWN", "CINNAMON", "CARAMEL", "CHOCOLATE", "DARKBG",
                 "DARKGB", "DARKPURPLE", "DARKGREY2", "GREY2", "BLACK3", "EBONY", "DARKGB2",
                 "BROWN2", "DARKBROWN2"]

pelt_length = ["short", "medium", "medium", "long"]
eye_colours = ['YELLOW', 'AMBER', 'HAZEL', 'PALEGREEN', 'GREEN',
               'BLUE', 'DARKBLUE', 'PINK', 'SCARLET', 'VIOLET',
               'PALEYELLOW', 'RED', 'AQUA', 'PALEVIOLET',
               'SAGEGREEN', 'PALEBLUE', 'BROWN', 'SPRINGGREEN',
               'GOLD', 'HONEY', 'COPPER', 'MAGENTA', 'MINT',
               'EMERALD', 'PUMPKIN', 'ROSEGOLD', 'DANDELION',
               'INDIGO', 'AMARANTH', 'CORAL', 'DARKGREEN',
               'DARKAMBER']
# scars1 is scars from other cats, other animals - scars2 is missing parts - scars3 is "special" scars that could only happen in a special event
# bite scars by @wood pank on discord
scars1 = ["ONE", "TWO", "THREE", "TAILSCAR", "SNOUT", "CHEEK", "SIDE", "THROAT", "TAILBASE", "BELLY",
            "LEGBITE", "NECKBITE", "FACE", "MANLEG", "BRIGHTHEART", "MANTAIL", "BRIDGE", "RIGHTBLIND", "LEFTBLIND",
          "BOTHBLIND", "BEAKCHEEK", "BEAKLOWER", "CATBITE", "RATBITE", "QUILLCHUNK", "QUILLSCRATCH"]
scars2 = ["LEFTEAR", "RIGHTEAR", "NOTAIL", "HALFTAIL", "NOPAW", "NOLEFTEAR", "NORIGHTEAR", "NOEAR"]
scars3 = ["SNAKE", "TOETRAP", "BURNPAWS", "BURNTAIL", "BURNBELLY", "BURNRUMP", "FROSTFACE", "FROSTTAIL", "FROSTMITT", "FROSTSOCK"]

plant_accessories = ["MAPLE LEAF", "HOLLY", "BLUE BERRIES", "FORGET ME NOTS", "RYE STALK", "LAUREL",
                    "BLUEBELLS", "NETTLE", "POPPY", "LAVENDER", "HERBS", "PETALS", "DRY HERBS",
                    "OAK LEAVES", "CATMINT", "MAPLE SEED", "JUNIPER", "POPPY FLOWER", "JUNIPER BERRIES",
                    "DAISY FLOWER", "BORAGE FLOWER", "OAK LEAF", "BEECH LEAF", "LAUREL LEAVES",
                     "COLTSFOOT FLOWER", "BINDWEED VINE", "TORMENTIL FLOWER", "BRIGHT-EYE FLOWER",
                     "LAVENDER FLOWER", "YARROW CLUMP"
]
wild_accessories = ["RED FEATHERS", "BLUE FEATHERS", "JAY FEATHERS", "MOTH WINGS", "CICADA WINGS"
]
collars = [
    "CRIMSON", "BLUE", "YELLOW", "CYAN", "RED", "LIME", "GREEN", "RAINBOW",
    "BLACK", "SPIKES", "PINK", "PURPLE", "MULTI", "CRIMSONBELL", "BLUEBELL",
    "YELLOWBELL", "CYANBELL", "REDBELL", "LIMEBELL", "GREENBELL",
    "RAINBOWBELL", "BLACKBELL", "SPIKESBELL", "PINKBELL", "PURPLEBELL",
    "MULTIBELL", "CRIMSONBOW", "BLUEBOW", "YELLOWBOW", "CYANBOW", "REDBOW",
    "LIMEBOW", "GREENBOW", "RAINBOWBOW", "BLACKBOW", "SPIKESBOW", "PINKBOW",
    "PURPLEBOW", "MULTIBOW", "WHITEYARN", "BLUEYARN", "YELLOWYARN", "PURPLEYARN",
    "PINKYARN", "MINTYARN", "GREYYARN", "RAINBOWYARN", "GREENYARN", "REDYARN",
    "FADEDYARN", "ORANGEYARN", "GRADIENTYARN", "REDSCARF", "BLUESCARF",
    "YELLOWSCARF", "CYANSCARF", "CRIMSONSCARF", "LIMESCARF", "GREENSCARF",
    "RAINBOWSCARF", "GREYSCARF", "GOLDSCARF", "PINKSCARF", "PURPLESCARF",
    "ORANGESCARF", "REDSCARFS", "BLUESCARFS", "ORANGESCARFS", "MINTSCARFS",
    "CRIMSONSCARFS", "GREENSCARFS", "CYANSCARFS", "BLUE2SCARFS", "PURPLESCARFS",
    "GOLDSCARFS", "PINKSCARFS", "YELLOWSCARFS", "BLACKSCARFS", "CRIMSONSPIKE",
    "BLUESPIKE", "YELLOWSPIKE", "CYANSPIKE", "REDSPIKE", "LIMESPIKE", "GREENSPIKE",
    "RAINBOWSPIKE", "BLACKSPIKE", "GOLDSPIKE", "PINKSPIKE", "PURPLESPIKE", "MULTISPIKE",
    "LESBIANBAN", "GAYBAN", "NONBINARYBAN", "BISEXUALBAN", "ASEXUALBAN", "AROMANTICBAN", "AROACEBAN",
    "OMNISEXUALBAN", "INTERSEXBAN", "RAINBOWBAN", "TRANSGENDERBAN", "GENDERQUEERBAN", "AGENDERBAN"
]
pelt_names_F = ["Spotted", "SingleColour", "SingleColour", "TwoColour", "Tabby", "Tortie", "Calico", "Ghost", "Doberman", "Pinstripe",
    "Tabby", "TwoColour", "Speckled", "Marbled", "Bengal", "Rosette", "Smoke", "Ticked", "Merle", "Abyssinian", "Snowflake", "Clouded",
    "Cloudy", "Classic", "Mackerel", "Sokoke", "Gradient", "Siamese", "Ragdoll", "Shaded",
    "DarkTabby", "DilutedTabby", "DilutedTabby", "Tonkinese", "DilutedTonkinese",
    "DilutedBengal", "DilutedSpeckled", "DilutedMarbled", "Freckled", "DilutedFreckled", "Somali", "TickedDilute", 
    "DilutedRosette", "DilutedClassic", "DilutedSokoke", "MackerelDilute", "DarkMackerel", "DarkSpeckled", "DarkSokoke",
    "DarkRosette", "DarkClassic", "DarkMarbled", "DarkBengal"]
pelt_names_M = ["Spotted", "SingleColour", "SingleColour", "TwoColour", "Tabby", "Tabby", "Speckled", "Ghost", "Doberman", "Pinstripe",
    "TwoColour", "Marbled", "Bengal", "Rosette", "Smoke", "Ticked", "Merle", "Abyssinian", "Snowflake", "Clouded", "Cloudy", "Classic",
    "Mackerel", "Sokoke", "Gradient", "Siamese", "Ragdoll", "Shaded",
    "DarkTabby", "DilutedTabby", "DilutedTabby", "Tonkinese", "DilutedTonkinese",
    "DilutedBengal", "DilutedSpeckled", "DilutedMarbled", "Freckled", "DilutedFreckled", "Somali", "TickedDilute", 
    "DilutedRosette", "DilutedClassic", "DilutedSokoke", "MackerelDilute", "DarkMackerel", "DarkSpeckled", "DarkSokoke",
    "DarkRosette", "DarkClassic", "DarkMarbled", "DarkBengal"]

# SPRITE NAMES
single_colours = [
    'WHITE', 'PALEGREY', 'SILVER', 'GREY', 'DARKGREY', 'BLACK', 'PALEGINGER',
    'GOLDEN', 'GINGER', 'DARKGINGER', 'LIGHTBROWN', 'BROWN', 'DARKBROWN',
    'WHITE2', 'BLUE', 'LILAC', 'BLACK2', 'DARK', 'FAWN', 'CINNAMON', 'CARAMEL',
    'CHOCOLATE', 'PALE', 'APRICOT', 'CREAM', 'ORANGE', 'CREAM2', 'LIGHTPINK',
    'PINK', 'DARKPINK', 'LIGHTBG', 'BG', 'DARKBG', 'CREAM3', 'PALEGINGER2',
    'GINGER2', 'DARKGINGER2', 'LIGHTGB', 'GB', 'DARKGB', 'LIGHTGREEN', 'GREEN',
    'DARKGREEN', 'LIGHTPURPLE', 'PURPLE', 'DARKPURPLE', 'SNOW', 'LIGHTGREY2',
    'GREY2', 'DARKGREY2', 'BLACK3', 'EBONY', 'PALEYELLOW', 'YELLOW', 'GOLD',
    'DARKCREAM', 'LIGHTGB2', 'GB2', 'DARKGB2', 'LIGHTBROWN2', 'BROWN2', 'DARKBROWN2',
    'WHITE3', 'PALEGREY2', 'LIGHTGREY3', 'GREY3', 'DARKGREY3', 'STONE', 'COAL', 'OBSIDIAN',
    'BLACK4', 'PALECREAM', 'CREAM4', 'DARKCREAM2', 'FAWN2', 'TAN', 'LIGHTBROWN3', 'BROWN3',
    'CHOCOLATE', 'DARKBROWN3', 'EBONY1', 'PALEGINGER3', 'LIGHTGINGER3', 'GINGER3', 'FIRE',
    'DARKGINGER3', 'RUSSET', 'RED', 'AUBURN', 'PALELILAC', 'LIGHTLILAC', 'LILAC2', 'DARKLILAC',
    'ROSE', 'LIGHTGOLD', 'GOLDEN2', 'DARKGOLD', 'HONEY', 'LIGHTSILVER', 'SILVER2', 'DARKSILVER',
    'PALEBLUE', 'LIGHTBLUE', 'BLUE1', 'RUSSIAN', 'DARKBLUE'
]
eye_sprites = [
    'YELLOW', 'AMBER', 'HAZEL', 'PALEGREEN', 'GREEN', 'BLUE', 'DARKBLUE', 'PINK',
    'SCARLET', 'VIOLET', 'PALEYELLOW', 'RED', 'AQUA', 'PALEVIOLET', 'SAGEGREEN',
    'PALEBLUE', 'BROWN', 'SPRINGGREEN', 'GOLD', 'HONEY', 'COPPER', 'MAGENTA', 'MINT',
    'EMERALD', 'PUMPKIN', 'ROSEGOLD', 'DANDELION', 'INDIGO', 'AMARANTH', 'CORAL',
    'DARKGREEN', 'DARKAMBER', 'BLUEYELLOW', 'BLUEGREEN', 'GREENGOLD', 'PINKBLUE'
    
]
little_white = ['LITTLE', 'LITTLECREAMY', 'LIGHTTUXEDO', 'BUZZARDFANG', 'TIP', 'BLAZE', 'BIB', 'VEE', 'PAWS', 
    'BELLY', 'TAILTIP', 'TOES', 'BROKENBLAZE', 'LILTWO', 'SCOURGE', 'TOESTAIL', 'RAVENPAW', 'HONEY',
                'FRECKLES2', 'WHITEEAR', 'MASK', 'LILTWOCREAMY', 'SCOURGECREAMY', 'RAVENPAWCREAMY',
    'TOESTAILCREAMY', 'BADGER', 'DILUTEDTUXEDO', 'DILUTEDTAIL', 'DILUTEDHEART', 'DILUTEDPIEBALD', 'DILUTEDGLASS', 'DILUTEDBROKEN', 'MOORISHFADE', 'ANYFADE', 'ANY2FADE',
    'REVERSEANYFADE', 'REVERSEANY2FADE', 'CURVEDFADE', 'VANFADE', 'REVERSECURVEDFADE', 'HALFFACEFADE', 'REVERSEHALFFACEFADE']
mid_white = ['TUXEDO', 'TUXEDOCREAMY', 'FANCY', 'UNDERS', 'DAMIEN', 'SKUNK', 'MITAINE', 'SQUEAKS', 'STAR',
             'HALFHEART', 'HUSKY', 'S', 'STARCREAMY', 'SNOWBACK', 'CREAMBACK', 'REVERSEANY2', 'REVERSEANY2CREAMY',
    'SKUNKCREAMY', 'REVERSEHEART', 'REVERSEHEARTCREAMY', 'REVERSEVAN', 'REVERSEVANCREAMY']
high_white = ['ANY', 'ANYCREAMY', 'ANY2', 'ANY2CREAMY', 'BROKEN', 'FRECKLES', 'RINGTAIL', 'HALFFACE', 'PANTS2', 
    'GOATEE', 'PRINCE', 'FAROFA', 'MISTER', 'PANTS', 'REVERSEPANTS', 'HALFWHITE', 'APPALOOSA', 'PIEBALD',
    'CURVED', 'GLASS', 'MASKMANTLE', 'MOJO', 'STAINS', 'STAINS2', 'CRESCENT', 'COW', 'SWIFTPAW',
    'GLASSCREAMY', 'PIEBALDCREAMY', 'BROKENCREAMY', 'HALFFACECREAMY', 'HALFCREAMY', 'RINGTAILCREAMY',
    'REVERSEANY', 'REVERSEANYCREAMY', 'REVERSECURVED', 'REVERSECURVEDCREAMY', 'REVERSEHALFFACE', 'REVERSEHALFFACECREAMY', 'CURVEDCREAMY']
mostly_white = ['VAN', 'VANCREAMY', 'ONEEAR', 'LIGHTSONG', 'TAIL', 'HEART', 'MOORISH', 'APRON', 'CAPSADDLE', 'COW', 'MOORISHCREAMY',
                'BLACKSTAR', 'BLACKSTARCREAMY', 'HEARTCREAMY', 'TAILCREAMY', 'SPINE', 'SPINECREAMY']
point_markings = ['COLOURPOINT', 'COLOURPOINTCREAMY', 'RAGDOLL', 'KARPATI', 'BROWNSPOTS','RAGDOLLCREAMY', 'DILUTEDCOLOURPOINT', 'JASMINE']
vit = ['VITILIGO', 'VITILIGO2', 'KARPATILIGO']
white_sprites = [
    little_white, mid_white, high_white, mostly_white, point_markings, vit, 'FULLWHITE', 'EXTRA', 'POINTMARK'
]

skin_sprites = ['BLACK', 'RED', 'PINK', 'DARKBROWN', 'BROWN', 'LIGHTBROWN',
                'DARK', 'DARKGREY', 'GREY', 'DARKSALMON', 'SALMON', 'PEACH',
                'DARKMARBLED', 'MARBLED', 'LIGHTMARBLED', 'DARKBLUE', 'BLUE',
                'LIGHTBLUE', 'ALBINOPINK', 'ALBINOBLUE', 'ALBINORED', 'ALBINOVIOLET', 'MELANISTICLIGHT', 'MELANISTIC', 'MELANISTICDARK']


# CHOOSING PELT
def choose_pelt(gender,colour=None,white=None,pelt=None,length=None,determined=False):
    if pelt is None:
        a = randint(0, 100)
        if a != 1:
            pelt = choice(pelt_names_F) if gender == "female" else choice(pelt_names_M)
        else:
            pelt = choice(pelt_names_F)
            if gender == 'male' and pelt in ['Tortie', 'Calico']:
                print("Male tortie/calico!")
    elif pelt in ['Tortie', 'Calico'] and gender == 'male' and not determined:
        a = randint(0, 200)
        if a != 1:
            pelt = choice(pelt_names_M)
    if length is None:
        length = choice(pelt_length)
    if pelt == "SingleColour":
        if colour is None and not white:
            return SingleColour(choice(pelt_colours), length)
        elif colour is None:
            return SingleColour("WHITE", length)
        else:
            return SingleColour(colour, length)
    elif pelt == "TwoColour":
        if colour is None:
            return TwoColour(choice(pelt_c_no_white), length)
        else:
            return TwoColour(colour, length)
    elif pelt == "Tabby":
        if colour is None and white is None:
            return Tabby(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Tabby(choice(pelt_colours), white, length)
        else:
            return Tabby(colour, white, length)
    elif pelt == "Marbled":
        if colour is None and white is None:
            return Marbled(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Marbled(choice(pelt_colours), white, length)
        else:
            return Marbled(colour, white, length)
    elif pelt == "Rosette":
        if colour is None and white is None:
            return Rosette(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Rosette(choice(pelt_colours), white, length)
        else:
            return Rosette(colour, white, length)
    elif pelt == "Smoke":
        if colour is None and white is None:
            return Smoke(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Smoke(choice(pelt_colours), white, length)
        else:
            return Smoke(colour, white, length)
    elif pelt == "Ticked":
        if colour is None and white is None:
            return Ticked(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Ticked(choice(pelt_colours), white, length)
        else:
            return Ticked(colour, white, length)
    elif pelt == "Speckled":
        if colour is None and white is None:
            return Speckled(choice(pelt_colours), choice([False, True]),
                            length)
        elif colour is None:
            return Speckled(choice(pelt_colours), white, length)
        else:
            return Speckled(colour, white, length)
    elif pelt == "Bengal":
        if colour is None and white is None:
            return Bengal(choice(pelt_colours), choice([False, True]),
                             length)
        elif colour is None:
            return Bengal(choice(pelt_colours), white, length)
        else:
            return Bengal(colour, white, length)
    elif pelt == "Snowflake":
        if colour is None and white is None:
            return Snowflake(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Snowflake(choice(pelt_colours), white, length)
        else:
            return Snowflake(colour, white, length)
    elif pelt == "Abyssinian":
        if colour is None and white is None:
            return Abyssinian(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Abyssinian(choice(pelt_colours), white, length)
        else:
            return Abyssinian(colour, white, length)
    elif pelt == "Merle":
        if colour is None and white is None:
            return Merle(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Merle(choice(pelt_colours), white, length)
        else:
            return Merle(colour, white, length)
    elif pelt == "Clouded":
        if colour is None and white is None:
            return Clouded(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Clouded(choice(pelt_colours), white, length)
        else:
            return Clouded(colour, white, length)
    elif pelt == "Doberman":
        if colour is None and white is None:
            return Doberman(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Doberman(choice(pelt_colours), white, length)
        else:
            return Doberman(colour, white, length)
    elif pelt == "Pinstripe":
        if colour is None and white is None:
            return Pinstripe(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Pinstripe(choice(pelt_colours), white, length)
        else:
            return Pinstripe(colour, white, length)
    elif pelt == "Ghost":
        if colour is None and white is None:
            return Ghost(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Ghost(choice(pelt_colours), white, length)
        else:
            return Ghost(colour, white, length)
    elif pelt == "Spotted":
        if colour is None and white is None:
            return Spotted(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Spotted(choice(pelt_colours), white, length)
        else:
            return Spotted(colour, white, length)
    elif pelt == "Cloudy":
        if colour is None and white is None:
            return Cloudy(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Cloudy(choice(pelt_colours), white, length)
        else:
            return Cloudy(colour, white, length)
    elif pelt == "Classic":
        if colour is None and white is None:
            return Classic(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Classic(choice(pelt_colours), white, length)
        else:
            return Classic(colour, white, length)
    elif pelt == "Mackerel":
        if colour is None and white is None:
            return Mackerel(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Mackerel(choice(pelt_colours), white, length)
        else:
            return Mackerel(colour, white, length)
    elif pelt == "Sokoke":
        if colour is None and white is None:
            return Sokoke(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Sokoke(choice(pelt_colours), white, length)
        else:
            return Sokoke(colour, white, length)
    elif pelt == "Siamese":
        if colour is None and white is None:
            return Siamese(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Siamese(choice(pelt_colours), white, length)
        else:
            return Siamese(colour, white, length)
    elif pelt == "Ragdoll":
        if colour is None and white is None:
            return Ragdoll(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Ragdoll(choice(pelt_colours), white, length)
        else:
            return Ragdoll(colour, white, length)
    elif pelt == "Shaded":
        if colour is None and white is None:
            return Shaded(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Shaded(choice(pelt_colours), white, length)
        else:
            return Shaded(colour, white, length)
    elif pelt == "DarkTabby":
        if colour is None and white is None:
            return DarkTabby(choice(dilute_pelt_c), choice([False, True]), length)
        elif colour is None:
            return DarkTabby(choice(dilute_pelt_c), white, length)
        else:
            return DarkTabby(colour, white, length)
    elif pelt == "DilutedTabby":
        if colour is None and white is None:
            return DilutedTabby(choice(dilute_pelt_c), choice([False, True]), length)
        elif colour is None:
            return DilutedTabby(choice(dilute_pelt_c), white, length)
        else:
            return DilutedTabby(colour, white, length)
    elif pelt == "DarkMarbled":
        if colour is None and white is None:
            return DarkMarbled(choice(dilute_pelt_c), choice([False, True]), length)
        elif colour is None:
            return DarkMarbled(choice(dilute_pelt_c), white, length)
        else:
            return DarkMarbled(colour, white, length)
    elif pelt == "DilutedMarbled":
        if colour is None and white is None:
            return DilutedMarbled(choice(dilute_pelt_c), choice([False, True]), length)
        elif colour is None:
            return DilutedMarbled(choice(dilute_pelt_c), white, length)
        else:
            return DilutedMarbled(colour, white, length)
    elif pelt == "DarkRosette":
        if colour is None and white is None:
            return DarkRosette(choice(dilute_pelt_c), choice([False, True]), length)
        elif colour is None:
            return DarkRosette(choice(dilute_pelt_c), white, length)
        else:
            return DarkRosette(colour, white, length)
    elif pelt == "DilutedRosette":
        if colour is None and white is None:
            return DilutedRosette(choice(dilute_pelt_c), choice([False, True]), length)
        elif colour is None:
            return DilutedRosette(choice(dilute_pelt_c), white, length)
        else:
            return DilutedRosette(colour, white, length)
    elif pelt == "Somali":
        if colour is None and white is None:
            return Somali(choice(pelt_colours), choice([False, True]), length)
        elif colour is None:
            return Somali(choice(pelt_colours), white, length)
        else:
            return Somali(colour, white, length)
    elif pelt == "TickedDilute":
        if colour is None and white is None:
            return TickedDilute(choice(dilute_pelt_c), choice([False, True]), length)
        elif colour is None:
            return TickedDilute(choice(dilute_pelt_c), white, length)
        else:
            return TickedDilute(colour, white, length)
    elif pelt == "DarkSpeckled":
        if colour is None and white is None:
            return DarkSpeckled(choice(dilute_pelt_c), choice([False, True]),
                            length)
        elif colour is None:
            return DarkSpeckled(choice(dilute_pelt_c), white, length)
        else:
            return DarkSpeckled(colour, white, length)
    elif pelt == "DilutedSpeckled":
        if colour is None and white is None:
            return DilutedSpeckled(choice(dilute_pelt_c), choice([False, True]),
                            length)
        elif colour is None:
            return DilutedSpeckled(choice(dilute_pelt_c), white, length)
        else:
            return DilutedSpeckled(colour, white, length)
    elif pelt == "DarkBengal":
        if colour is None and white is None:
            return DarkBengal(choice(dilute_pelt_c), choice([False, True]),
                             length)
        elif colour is None:
            return DarkBengal(choice(dilute_pelt_c), white, length)
        else:
            return DarkBengal(colour, white, length)
    elif pelt == "DilutedBengal":
        if colour is None and white is None:
            return DilutedBengal(choice(dilute_pelt_c), choice([False, True]),
                             length)
        elif colour is None:
            return DilutedBengal(choice(dilute_pelt_c), white, length)
        else:
            return DilutedBengal(colour, white, length)
    elif pelt == "DarkClassic":
        if colour is None and white is None:
            return DarkClassic(choice(dilute_pelt_c), choice([False, True]),
                             length)
        elif colour is None:
            return DarkClassic(choice(dilute_pelt_c), white, length)
        else:
            return DarkClassic(colour, white, length)
    elif pelt == "DilutedClassic":
        if colour is None and white is None:
            return DilutedClassic(choice(dilute_pelt_c), choice([False, True]),
                             length)
        elif colour is None:
            return DilutedClassic(choice(dilute_pelt_c), white, length)
        else:
            return DilutedClassic(colour, white, length)
    elif pelt == "DarkMackerel":
        if colour is None and white is None:
            return DarkMackerel(choice(dilute_pelt_c), choice([False, True]),
                             length)
        elif colour is None:
            return DarkMackerel(choice(dilute_pelt_c), white, length)
        else:
            return DarkMackerel(colour, white, length)
    elif pelt == "MackerelDilute":
        if colour is None and white is None:
            return MackerelDilute(choice(dilute_pelt_c), choice([False, True]),
                             length)
        elif colour is None:
            return MackerelDilute(choice(dilute_pelt_c), white, length)
        else:
            return MackerelDilute(colour, white, length)
    elif pelt == "DarkSokoke":
        if colour is None and white is None:
            return DarkSokoke(choice(dilute_pelt_c), choice([False, True]),
                             length)
        elif colour is None:
            return DarkSokoke(choice(dilute_pelt_c), white, length)
        else:
            return DarkSokoke(colour, white, length)
    elif pelt == "DilutedSokoke":
        if colour is None and white is None:
            return DilutedSokoke(choice(dilute_pelt_c), choice([False, True]),
                             length)
        elif colour is None:
            return DilutedSokoke(choice(dilute_pelt_c), white, length)
        else:
            return DilutedSokoke(colour, white, length)
    elif pelt == "Freckled":
        if colour is None and white is None:
            return Freckled(choice(pelt_colours), choice([False, True]),
                             length)
        elif colour is None:
            return Freckled(choice(pelt_colours), white, length)
        else:
            return Freckled(colour, white, length)
    elif pelt == "DilutedFreckled":
        if colour is None and white is None:
            return DilutedFreckled(choice(dilute_pelt_c), choice([False, True]),
                             length)
        elif colour is None:
            return DilutedFreckled(choice(dilute_pelt_c), white, length)
        else:
            return DilutedFreckled(colour, white, length)
    elif pelt == "Tonkinese":
        if colour is None and white is None:
            return Tonkinese(choice(pelt_colours), choice([False, True]),
                             length)
        elif colour is None:
            return Tonkinese(choice(pelt_colours), white, length)
        else:
            return Tonkinese(colour, white, length)
    elif pelt == "DilutedTonkinese":
        if colour is None and white is None:
            return DilutedTonkinese(choice(dilute_pelt_c), choice([False, True]),
                             length)
        elif colour is None:
            return DilutedTonkinese(choice(dilute_pelt_c), white, length)
        else:
            return DilutedTonkinese(colour, white, length)
    elif pelt == "Tortie":
        if white is None:
            return Tortie(choice([False, True]), length)
        else:
            return Tortie(white, length)
    else:
        return Calico(length)

def describe_color(pelt, tortiecolour, tortiepattern, white_patches):
        color_name = ''
        color_name = str(pelt.colour).lower()
        if tortiecolour != None:
            color_name = str(tortiecolour).lower()
        if color_name == 'palegrey' or color_name == 'lightgrey2':
            color_name = 'pale grey'
        elif color_name == 'grey2':
            color_name = 'grey'
        elif color_name == 'darkgrey' or color_name == 'darkgrey2':
            color_name = 'dark grey'
        elif color_name == 'paleginger' or color_name == 'paleginger2':
            color_name = 'pale ginger'
        elif color_name == 'ginger2':
            color_name = 'ginger'
        elif color_name == 'darkginger' or color_name == 'darkginger2':
            color_name = 'dark ginger'
        elif color_name == 'lightbrown' or color_name == 'lightbrown2':
            color_name = 'light brown'
        elif color_name == 'brown2':
            color_name = 'brown'
        elif color_name == 'darkbrown' or color_name == 'darkbrown2':
            color_name = 'dark brown'
        elif color_name == 'white2':
            color_name = 'white'
        elif color_name == 'black2' or color_name == 'black3':
            color_name = 'black'
        elif color_name == 'lightgb2':
            color_name = 'light grey-brown'
        elif color_name == 'gb2':
            color_name = 'grey-brown'
        elif color_name == 'dark' or color_name == 'darkgb2':
            color_name = 'dark grey-brown'
        elif color_name == 'pale':
            color_name = 'pale apricot'
        elif color_name == 'cream2' or color_name == 'cream3':
            color_name = 'cream'
        elif color_name == 'lightpink':
            color_name = 'pale pink'
        elif color_name == 'darkpink':
            color_name = 'dark pink'
        elif color_name == 'lightbg':
            color_name = 'pale blue'
        elif color_name == 'bg':
            color_name = 'blue'
        elif color_name == 'darkbg':
            color_name = 'dark blue'
        elif color_name == 'lightgreen':
            color_name = 'pale green-brown'
        elif color_name == 'green':
            color_name = 'green-brown'
        elif color_name == 'darkgreen':
            color_name = 'dark green-brown'
        elif color_name == 'lightpurple':
            color_name = 'pale violet'
        elif color_name == 'purple':
            color_name = 'violet'
        elif color_name == 'darkpurple':
            color_name = 'dark violet'
        elif color_name == 'paleyellow':
            color_name = 'pale yellow'
        elif color_name == 'dark cream':
            color_name = 'dark cream'
        elif color_name == 'lightgb':
            color_name = 'pale golden-brown'
        elif color_name == 'gb':
            color_name = 'golden-brown'
        elif color_name == 'darkgb':
            color_name = 'dark golden-brown'
        elif color_name == 'white3':
            color_name = 'white'
        elif color_name == 'palegrey2':
            color_name = 'pale grey'
        elif color_name == 'lightgrey3':
            color_name = 'light grey'
        elif color_name == 'grey3':
            color_name = 'grey'
        elif color_name == 'darkgrey3':
            color_name = 'dark grey'
        elif color_name == 'stone':
            color_name = 'stone grey'
        elif color_name == 'coal':
            color_name = 'coal grey'
        elif color_name == 'obsidian':
            color_name = 'obsidian'
        elif color_name == 'black4':
            color_name = 'black'
        elif color_name == 'palecream':
            color_name = 'pale cream'
        elif color_name == 'cream4':
            color_name = 'cream'
        elif color_name == 'darkcream2':
            color_name = 'dark cream'
        elif color_name == 'fawn2':
            color_name = 'fawn'
        elif color_name == 'tan':
            color_name = 'tan'
        elif color_name == 'lightbrown3':
            color_name = 'light brown'
        elif color_name == 'brown3':
            color_name = 'brown'
        elif color_name == 'chocolate2':
            color_name = 'chocolate brown'
        elif color_name == 'darkbrown3':
            color_name = 'dark brown'
        elif color_name == 'ebony1':
            color_name = 'ebony'
        elif color_name == 'paleginger3':
            color_name = 'pale ginger'
        elif color_name == 'lightginger3':
            color_name = 'light ginger'
        elif color_name == 'ginger3':
            color_name = 'ginger'
        elif color_name == 'fire':
            color_name = 'fire red'
        elif color_name == 'darkginger3':
            color_name = 'dark ginger'
        elif color_name == 'russet':
            color_name = 'russet'
        elif color_name == 'red':
            color_name = 'red'
        elif color_name == 'auburn':
            color_name = 'auburn'
        elif color_name == 'palelilac':
            color_name = 'pale lilac'
        elif color_name == 'lightlilac':
            color_name = 'light lilac'
        elif color_name == 'lilac2':
            color_name = 'lilac'
        elif color_name == 'darklilac':
            color_name = 'dark lilac'
        elif color_name == 'rose':
            color_name = 'rose brown'
        elif color_name == 'lightgold':
            color_name = 'yellow'
        elif color_name == 'golden2':
            color_name = 'golden'
        elif color_name == 'darkgold':
            color_name = 'dark golden'
        elif color_name == 'honey':
            color_name = 'honey yellow'
        elif color_name == 'lightsilver':
            color_name = 'light silver'
        elif color_name == 'silver2':
            color_name = 'silver'
        elif color_name == 'darksilver':
            color_name = 'dark silver'
        elif color_name == 'paleblue':
            color_name = 'pale blue'
        elif color_name == 'lightblue':
            color_name = 'light blue'
        elif color_name == 'blue1':
            color_name = 'blue'
        elif color_name == 'russian':
            color_name = 'russian blue'
        elif color_name == 'darkblue':
            color_name = 'dark blue'
        if pelt.name == "Tabby":
            color_name = color_name + ' tabby'
        elif pelt.name == "Speckled":
            color_name = color_name + ' speckled'
        elif pelt.name == "Bengal":
            color_name = color_name + ' bengal'
        elif pelt.name == "Marbled":
            color_name = color_name + ' marbled tabby'
        elif pelt.name == "Rosette":
            color_name = color_name + ' rosetted'
        elif pelt.name == "Ticked":
            color_name = color_name + ' ticked tabby'
        elif pelt.name == "Smoke":
            color_name = color_name + ' smoke'
        elif pelt.name == "Pinstripe":
            color_name = color_name + ' pinstripe tabby'
        elif pelt.name == "Doberman":
            color_name = color_name + ' doberman point'
        elif pelt.name == "Ghost":
            color_name = color_name + ' ghost tabby'
        elif pelt.name == "Abyssinian":
            color_name = color_name + ' abyssinian'
        elif pelt.name == "Clouded":
            color_name = color_name + ' clouded tabby'
        elif pelt.name == "Merle":
            color_name = color_name + ' merle'
        elif pelt.name == "Snowflake":
            color_name = color_name + ' snowflake'
        elif pelt.name == "Spotted":
            color_name = color_name + ' spotted tabby'
        elif pelt.name == "Cloudy":
            color_name = color_name + ' cloudy marbled'
        elif pelt.name == "Classic":
            color_name = color_name + ' classic tabby'
        elif pelt.name == "Mackerel":
            color_name = color_name + ' mackerel tabby'
        elif pelt.name == "Sokoke":
            color_name = color_name + ' sokoke tabby'
        elif pelt.name == "Gradient":
            color_name = color_name + ' faded'
        elif pelt.name == "Siamese":
            color_name = color_name + ' colourpoint'
        elif pelt.name == "Ragdoll":
            color_name = color_name + ' colourpoint'
        elif pelt.name == "Shaded":
            color_name = color_name + ' shaded'
        elif pelt.name == "DarkTabby":
            color_name = color_name + ' tabby'
        elif pelt.name == "DilutedTabby":
            color_name = 'diluted' + color_name + ' tabby'
        elif pelt.name == "DarkSpeckled":
            color_name = color_name + ' speckled'
        elif pelt.name == "DilutedSpeckled":
            color_name = 'diluted' + color_name + ' speckled'
        elif pelt.name == "DarkBengal":
            color_name = color_name + ' bengal'
        elif pelt.name == "DilutedBengal":
            color_name = 'diluted' + color_name + ' bengal'
        elif pelt.name == "DarkMarbled":
            color_name = color_name + ' marbled tabby'
        elif pelt.name == "DilutedMarbled":
            color_name = 'diluted' + color_name + ' marbled tabby'
        elif pelt.name == "DarkRosette":
            color_name = color_name + ' rosetted'
        elif pelt.name == "DilutedRosette":
            color_name = 'diluted' + color_name + ' rosetted'
        elif pelt.name == "TickedDilute":
            color_name = 'diluted' + color_name + ' ticked tabby'
        elif pelt.name == "Somali":
            color_name = color_name + ' somali'
        elif pelt.name == "Freckled":
            color_name = color_name + ' freckled'
        elif pelt.name == "DilutedFreckled":
            color_name = 'diluted' + color_name + ' freckled'
        elif pelt.name == "DarkClassic":
            color_name = color_name + ' classic tabby'
        elif pelt.name == "DilutedClassic":
            color_name = 'diluted' + color_name + ' classic tabby'
        elif pelt.name == "DarkSokoke":
            color_name = color_name + ' sokoke'
        elif pelt.name == "DilutedSokoke":
            color_name = 'diluted' + color_name + ' sokoke'
        elif pelt.name == "DarkMackerel":
            color_name = color_name + ' mackerel tabby'
        elif pelt.name == "MackerelDilute":
            color_name = 'diluted' + color_name + ' mackerel tabby'
        elif pelt.name == "Tonkinese":
            color_name = color_name + ' tonkinese'
        elif pelt.name == "DilutedTonkinese":
            color_name = color_name + ' mink'

        elif pelt.name == "Tortie":
            if tortiepattern not in ["tortiesolid", "tortiesmoke"]:
                color_name = color_name + ' torbie'
            else:
                color_name = color_name + ' tortie'
        elif pelt.name == "Calico":
            if tortiepattern not in ["tortiesolid", "tortiesmoke"]:
                color_name = color_name + ' tabico'
            else:
                color_name = color_name + ' calico'
        # enough to comment but not make calico
        if white_patches is not None:
            if white_patches in little_white + mid_white:
                color_name = color_name + ' and white'
            # and white
            elif white_patches in high_white:
                if pelt.name != "Calico":
                    color_name = color_name + ' and white'
            # white and
            elif white_patches in mostly_white:
                color_name = 'white and ' + color_name
            # colorpoint
            elif white_patches in point_markings and pelt.name != 'Doberman' and pelt.name != 'Colourpoint':
                color_name = color_name + ' point'
                if color_name == 'dark ginger point' or color_name == 'ginger point' or color_name == 'orange point' or color_name == 'apricot point':
                    color_name = 'flame point'
            # vitiligo
            elif white_patches in vit:
                color_name = color_name + ' with vitiligo'
        else:
            color_name = color_name

        if color_name == 'tortie':
            color_name = 'tortoiseshell'

        if white_patches == 'FULLWHITE':
            color_name = 'white'

        if color_name == 'white and white':
            color_name = 'white'
            
        if color_name == 'white2 and white':
            color_name = 'white'

        return color_name
